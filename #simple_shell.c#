#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
/**
 * main - function that provide a simple unix line interpreter
 * @argc: input
 * @argv: input
 * Return: Always 0 on success
 */
int lsh_cd(char **args);
int lsh_help(char **args);
int lsh_exit(char **args);

/*
  List of builtin commands, followed by their corresponding functions.
 */
char *builtin_str[] = {
  "cd",
  "help",
  "exit",
"env"
};

int (*builtin_func[]) (char **) = {
  &lsh_cd,
  &lsh_help,
  &lsh_exit
};

int lsh_num_builtins() {
  return sizeof(builtin_str) / sizeof(char *);
}
/**
 * lsh_cd- change directory
 *
 *
 */
int lsh_cd(char **args)
{
  if (args[1] == NULL) {
    fprintf(stderr, "lsh: expected argument to \"cd\"\n");
  } else {
    if (chdir(args[1]) != 0) {
      perror("lsh");
    }
  }
  return 1;
}



int main(int argc, char *argv[])
{
(void)argc;
int T = 1;
char *buf;
char *env[2];
int x, i, a;
char *c, *token = NULL, *cmd, *path;
size_t size = 500;
buf = (char *)malloc(size * sizeof(char));
c = (char *)malloc (size * sizeof(char));
while (T == 1)
{
printf("#cisfun$ ");
getline(&buf, &size, stdin);
strcpy(c, buf);
token = strtok(c, "\n");
path = (char *)malloc (size * sizeof(char));
strcpy(path, token);
token = strtok(buf, "/");
cmd = malloc(sizeof(token));
while (token != NULL)
{
cmd = token;
token = strtok(NULL, " /");
}
env[0] = cmd;
env[1] = NULL;
x = fork();
if (x == 0)
{
a = execve(path, env, NULL);
if (a != 0)
printf("%s :No such file or directory\n", argv[0]);
}
else if (x > 0)
wait(0);
}
return (1);
}
